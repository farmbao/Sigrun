package sigrun.serialization;

import sigrun.common.CoordinateUnitsCode;
import sigrun.common.GainTypeForInstruments;
import sigrun.common.TraceHeader;
import sigrun.common.TraceIdentificationCode;
import sigrun.converters.ByteANumberConverter;

import java.util.Arrays;

public class TraceHeaderSerializer extends Serializer<TraceHeader> {
    public int internalOffset = 0;

    public TraceHeaderSerializer() {
    }

    public synchronized byte[] serialize(TraceHeader traceHeader) {
        internalOffset = 0;
        byte[] result = new byte[TraceHeader.TRACE_HEADER_LENGTH];
        writeInt(traceHeader.getTraceSequenceNumberWL(), result);
        writeInt(traceHeader.getTraceSequenceNumberWS(), result);
        writeInt(traceHeader.getOriginalFieldRecordNumber(), result);
        writeInt(traceHeader.getTraceNumberWOFR(), result);
        writeInt(traceHeader.getEnergySourcePointNumber(), result);
        writeInt(traceHeader.getEnsembleNumber(), result);
        writeInt(traceHeader.getTraceNumberWEnsemble(), result);
        writeShort(traceHeader.getTraceIdentificationCode().getCode(), result);
        writeShort(traceHeader.getNumberOfVerticallySummedTraces(), result);
        writeShort(traceHeader.getNumberOfHorizontallyStackedTraces(), result);
        writeShort(traceHeader.getDataUse(), result);
        writeInt(traceHeader.getDistanceFromTheCenterOfSP(), result);
        writeInt(traceHeader.getReceiverGroupElevation(), result);
        writeInt(traceHeader.getSurfaceElevationAtSource(), result);
        writeInt(traceHeader.getSourceDepthBelowSurface(), result);
        writeInt(traceHeader.getDatumElevationAtReceiverGroup(), result);
        writeInt(traceHeader.getDatumElevationAtSource(), result);
        writeInt(traceHeader.getWaterDepthAtSource(), result);
        writeInt(traceHeader.getWaterDepthAtGroup(), result);
        writeShort(traceHeader.getScalarForElevations(), result);
        writeShort(traceHeader.getScalarForCoordinates(), result);
        writeInt(traceHeader.getSourceX(), result);
        writeInt(traceHeader.getSourceY(), result);
        writeInt(traceHeader.getGroupX(), result);
        writeInt(traceHeader.getGroupY(), result);
        writeShort(traceHeader.getCoordinateUnitsCode().getCode(), result);
        writeShort(traceHeader.getWeatheringVelocity(), result);
        writeShort(traceHeader.getSubweatheringVelocity(), result);
        writeShort(traceHeader.getUpholeTimeAtSourceInMs(), result);
        writeShort(traceHeader.getUpholeTimeAtGroupInMs(), result);
        writeShort(traceHeader.getSourceStaticCorrectionInMs(), result);
        writeShort(traceHeader.getGroupStaticCorrectionInMs(), result);
        writeShort(traceHeader.getTotalStaticAppliedInMs(), result);
        writeShort(traceHeader.getLagTimeA(), result);
        writeShort(traceHeader.getLagTimeB(), result);
        writeShort(traceHeader.getDelayRecordingTime(), result);
        writeShort(traceHeader.getMuteTimeStart(), result);
        writeShort(traceHeader.getMuteTimeEnd(), result);
        writeShort(traceHeader.getNumberOfSamples(), result);
        writeShort(traceHeader.getSampleIntervalInMcs(), result);
        writeShort(traceHeader.getGainTypeForInstruments().getCode(), result);
        writeShort(traceHeader.getInstrumentGainConstant(), result);
        writeShort(traceHeader.getInstrumentEarlyOrInitialGain(), result);
        writeShort(traceHeader.getCorrelated(), result);
        writeShort(traceHeader.getSweepFrequencyAtStart(), result);
        writeShort(traceHeader.getSweepFrequencyAtEnd(), result);
        writeShort(traceHeader.getSweepLengthInMilliseconds(), result);
        writeShort(traceHeader.getSweepType(), result);
        writeShort(traceHeader.getSweepTraceTaperLengthAtStartInMilliseconds(), result);
        writeShort(traceHeader.getSweepTraceTaperLengthAtEndInMilliseconds(), result);
        writeShort(traceHeader.getTaperType(), result);
        writeShort(traceHeader.getAliasFilterFrequency(), result);
        writeShort(traceHeader.getAliasFilterSlope(), result);
        writeShort(traceHeader.getNotchFilterFrequency(), result);
        writeShort(traceHeader.getNotchFilterSlope(), result);
        writeShort(traceHeader.getLowCutFrequency(), result);
        writeShort(traceHeader.getHighCutFrequency(), result);
        writeShort(traceHeader.getLowCutSlope(), result);
        writeShort(traceHeader.getHighCutSlope(), result);
        writeShort(traceHeader.getYearDataRecorded(), result);
        writeShort(traceHeader.getDayOfYear(), result);
        writeShort(traceHeader.getHourOfDay(), result);
        writeShort(traceHeader.getMinuteOfHour(), result);
        writeShort(traceHeader.getSecondOfMinute(), result);
        writeShort(traceHeader.getTimeBasisCode(), result);
        writeShort(traceHeader.getTraceWeightingFactor(), result);
        writeShort(traceHeader.getGeophoneGroupNumberOfRollSwitchPositionOne(), result);
        writeShort(traceHeader.getGeophoneGroupNumberOfTraceNumberOneWOFR(), result);
        writeShort(traceHeader.getGeophoneGroupNumberOfLastTraceWOFR(), result);
        writeShort(traceHeader.getGapSize(), result);
        writeShort(traceHeader.getOverTravel(), result);
        writeInt(traceHeader.getxOfCDPPosition(), result);
        writeInt(traceHeader.getyOfCDPPosition(), result);
        writeInt(traceHeader.getInLineNumber(), result);
        writeInt(traceHeader.getCrossLineNumber(), result);
        writeInt(traceHeader.getShotpointNumber(), result);
        writeShort(traceHeader.getScalarForSPNumber(), result);
        writeShort(traceHeader.getTraceValuesMU(), result);
        writeArray(traceHeader.getTransductionConstant(), result);
        writeShort(traceHeader.getTransductionUnits(), result);
        writeShort(traceHeader.getDeviceTraceIdentifier(), result);
        writeShort(traceHeader.getScalarToBeAppliedToTimes(), result);
        writeShort(traceHeader.getSourceTypeOrientation(), result);
        writeArray(traceHeader.getSourceEnergyDirection(), result);
        writeArray(traceHeader.getSourceMeasurement(), result);
        writeShort(traceHeader.getSourceMeasurementUnit(), result);
        writeArray(traceHeader.getOptional(), result);

        return result;
    }

    public synchronized TraceHeader deserialize(final byte[] source) {
        if (source == null)
            throw new IllegalArgumentException("Source array cannot be null");

        if (source.length != TraceHeader.TRACE_HEADER_LENGTH)
            throw new IllegalArgumentException("Source length not match with trace header length");

        TraceHeader header = new TraceHeader();
        int offset = 0;
        int intSize = Integer.SIZE / 8;
        int shortSize = Short.SIZE / 8;

        header.setTraceSequenceNumberWL(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setTraceSequenceNumberWS(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setOriginalFieldRecordNumber(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setTraceNumberWOFR(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setEnergySourcePointNumber(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setEnsembleNumber(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setTraceNumberWEnsemble(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setTraceIdentificationCode(TraceIdentificationCode.create(ByteANumberConverter.byteAToShort(source, offset)));
        offset += shortSize;
        header.setNumberOfVerticallySummedTraces(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setNumberOfHorizontallyStackedTraces(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setDataUse(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setDistanceFromTheCenterOfSP(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setReceiverGroupElevation(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setSurfaceElevationAtSource(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setSourceDepthBelowSurface(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setDatumElevationAtReceiverGroup(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setDatumElevationAtSource(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setWaterDepthAtSource(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setWaterDepthAtGroup(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setScalarForElevations(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setScalarForCoordinates(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSourceX(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setSourceY(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setGroupX(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setGroupY(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setCoordinateUnitsCode(CoordinateUnitsCode.create(ByteANumberConverter.byteAToShort(source, offset)));
        offset += shortSize;
        header.setWeatheringVelocity(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSubweatheringVelocity(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setUpholeTimeAtSourceInMs(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setUpholeTimeAtGroupInMs(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSourceStaticCorrectionInMs(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setGroupStaticCorrectionInMs(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setTotalStaticAppliedInMs(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setLagTimeA(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setLagTimeB(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setDelayRecordingTime(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setMuteTimeStart(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setMuteTimeEnd(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setNumberOfSamples(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSampleIntervalInMcs(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setGainTypeForInstruments(GainTypeForInstruments.create(ByteANumberConverter.byteAToShort(source, offset)));
        offset += shortSize;
        header.setInstrumentGainConstant(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setInstrumentEarlyOrInitialGain(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setCorrelated(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSweepFrequencyAtStart(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSweepFrequencyAtEnd(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSweepLengthInMilliseconds(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSweepType(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSweepTraceTaperLengthAtStartInMilliseconds(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSweepTraceTaperLengthAtEndInMilliseconds(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setTaperType(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setAliasFilterFrequency(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setAliasFilterSlope(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setNotchFilterFrequency(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setNotchFilterSlope(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setLowCutFrequency(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setHighCutFrequency(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setLowCutSlope(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setHighCutSlope(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setYearDataRecorded(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setDayOfYear(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setHourOfDay(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setMinuteOfHour(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSecondOfMinute(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setTimeBasisCode(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setTraceWeightingFactor(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setGeophoneGroupNumberOfRollSwitchPositionOne(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setGeophoneGroupNumberOfTraceNumberOneWOFR(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setGeophoneGroupNumberOfLastTraceWOFR(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setGapSize(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setOverTravel(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setxOfCDPPosition(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setyOfCDPPosition(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setInLineNumber(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setCrossLineNumber(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setShotpointNumber(ByteANumberConverter.byteAToInt(source, offset));
        offset += intSize;
        header.setScalarForSPNumber(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setTraceValuesMU(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setTransductionConstant(Arrays.copyOfRange(source, offset, offset + 6));
        offset += 6;
        header.setTransductionUnits(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setDeviceTraceIdentifier(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setScalarForTimes(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSourceTypeOrientation(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setSourceEnergyDirection(Arrays.copyOfRange(source, offset, offset + 6));
        offset += 6;
        header.setSourceMeasurement(Arrays.copyOfRange(source, offset, offset + 6));
        offset += 6;
        header.setSourceMeasurementUnit(ByteANumberConverter.byteAToShort(source, offset));
        offset += shortSize;
        header.setOptional(Arrays.copyOfRange(source, offset, offset + 8));
        offset += 8;

        assert offset == 240;

        return header;
    }

    @Override
    public int lengthOfSerializableObject() {
        return TraceHeader.TRACE_HEADER_LENGTH;
    }
}